// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using PageTurners.Core.Context;

#nullable disable

namespace PageTurners.Core.Migrations
{
    [DbContext(typeof(PageTurnersContext))]
    [Migration("20231027105126_Init")]
    partial class Init
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.6")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("BookUser", b =>
                {
                    b.Property<int>("ReadBooksId")
                        .HasColumnType("int");

                    b.Property<string>("UsersReadBooksId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("ReadBooksId", "UsersReadBooksId");

                    b.HasIndex("UsersReadBooksId");

                    b.ToTable("BookUser");
                });

            modelBuilder.Entity("BookUser1", b =>
                {
                    b.Property<int>("ToReadListId")
                        .HasColumnType("int");

                    b.Property<string>("UsersReadLaterId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("ToReadListId", "UsersReadLaterId");

                    b.HasIndex("UsersReadLaterId");

                    b.ToTable("BookUser1");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "458f5dd2-1bb1-476b-8570-341aa02e174f",
                            ConcurrencyStamp = "a01da0ad-7609-4c88-992c-f2b9fa0a6ba9",
                            Name = "Admin",
                            NormalizedName = "ADMIN"
                        },
                        new
                        {
                            Id = "36833a72-f25c-4bd6-81bf-169c3b0c9f3d",
                            ConcurrencyStamp = "f56e7f99-c88a-4e96-9b4a-bd2338cc756c",
                            Name = "Moderator",
                            NormalizedName = "MODERATOR"
                        },
                        new
                        {
                            Id = "54efd5ff-1fc7-4772-9430-f3bb56bebe08",
                            ConcurrencyStamp = "9561f4d7-e6d1-4f5c-93c8-fc64c7180b90",
                            Name = "Reader",
                            NormalizedName = "READER"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderKey")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);

                    b.HasData(
                        new
                        {
                            UserId = "b6fc3a3e-0111-448f-bad6-f7e149bc0dcb",
                            RoleId = "458f5dd2-1bb1-476b-8570-341aa02e174f"
                        },
                        new
                        {
                            UserId = "b6fc3a3e-0111-448f-bad6-f7e149bc0dcb",
                            RoleId = "36833a72-f25c-4bd6-81bf-169c3b0c9f3d"
                        },
                        new
                        {
                            UserId = "1243de55-f009-443c-8043-0acd37d5524a",
                            RoleId = "36833a72-f25c-4bd6-81bf-169c3b0c9f3d"
                        },
                        new
                        {
                            UserId = "28898105-c650-41ef-93ed-e3c4eb349558",
                            RoleId = "36833a72-f25c-4bd6-81bf-169c3b0c9f3d"
                        },
                        new
                        {
                            UserId = "28898105-c650-41ef-93ed-e3c4eb349558",
                            RoleId = "458f5dd2-1bb1-476b-8570-341aa02e174f"
                        },
                        new
                        {
                            UserId = "28898105-c650-41ef-93ed-e3c4eb349558",
                            RoleId = "54efd5ff-1fc7-4772-9430-f3bb56bebe08"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Name")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("PageTurners.Core.Entities.Book", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Author")
                        .HasColumnType("nvarchar(max)");

                    b.Property<double?>("AverageRating")
                        .HasColumnType("float");

                    b.Property<int>("DatePubl")
                        .HasColumnType("int");

                    b.Property<string>("Desc")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Edition")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Genre")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Books");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Author = "Роберт Грін",
                            DatePubl = 1998,
                            Desc = "Ця книга розглядає стратегії та тактики влади, використовуючи приклади з історії та сучасного бізнесу.",
                            Edition = "Viking Press",
                            Genre = "Психологія, бізнес",
                            Title = "Ігри влади"
                        },
                        new
                        {
                            Id = 2,
                            Author = "Френсіс Скотт Фіцджеральд",
                            DatePubl = 1925,
                            Desc = "Цей роман розповідає історію багатого і таємничого Джей Гетсбі та його пристрасті до недосяжної коханої Дейзі.",
                            Edition = "Charles Scribner's Sons",
                            Genre = "Класика, роман",
                            Title = "Великий Гетсбі"
                        },
                        new
                        {
                            Id = 3,
                            Author = "Анна Тодд",
                            DatePubl = 2014,
                            Desc = "Ця книга розповідає про складність переходу від підліткового життя до дорослого, з фокусом на романтичних відносинах.",
                            Edition = "Gallery Books",
                            Genre = "Роман, молодіжна література",
                            Title = "Після"
                        },
                        new
                        {
                            Id = 4,
                            Author = "Джордж Р. Р. Мартін",
                            DatePubl = 1996,
                            Desc = "Перша книга серії `Пісня льоду і полум'я` розповідає про боротьбу різних родів за трон Залізного Трону у міфічному світі Вестерос.",
                            Edition = "Bantam Spectra",
                            Genre = "Фентезі, пригоди",
                            Title = "Гра престолів"
                        });
                });

            modelBuilder.Entity("PageTurners.Core.Entities.BookRequest", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Author")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("DatePubl")
                        .HasColumnType("datetime2");

                    b.Property<string>("Desc")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Edition")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Genre")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("OwnerId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("OwnerId");

                    b.ToTable("Requests");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Author = "Юлія Лабурнум",
                            OwnerId = "1243de55-f009-443c-8043-0acd37d5524a",
                            Title = "Лабіринт часу"
                        },
                        new
                        {
                            Id = 2,
                            Author = "Андрій Землянський",
                            Desc = "Спадщина Марса - це захоплюючий науково-фантастичний роман, який перенося читача у далеке майбутнє, на таємничу і загадкову планету Марс. Автор, Андрій Землянський, розповідає історію групи вчених і дослідників, які вирушають на Марс, щоб розкрити його давні таємниці.",
                            OwnerId = "b6fc3a3e-0111-448f-bad6-f7e149bc0dcb",
                            Title = "Спадщина Марса"
                        });
                });

            modelBuilder.Entity("PageTurners.Core.Entities.Comments", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("BookId")
                        .HasColumnType("int");

                    b.Property<string>("Comment")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CommentatorId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("BookId");

                    b.HasIndex("CommentatorId");

                    b.ToTable("Comment");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            BookId = 3,
                            Comment = "Дуже цікава історія!",
                            CommentatorId = "b6fc3a3e-0111-448f-bad6-f7e149bc0dcb",
                            Date = new DateTime(2023, 10, 27, 13, 51, 26, 521, DateTimeKind.Local).AddTicks(6748)
                        },
                        new
                        {
                            Id = 2,
                            BookId = 1,
                            Comment = "Трохи нудно...",
                            CommentatorId = "1243de55-f009-443c-8043-0acd37d5524a",
                            Date = new DateTime(2023, 10, 27, 13, 51, 26, 521, DateTimeKind.Local).AddTicks(6786)
                        });
                });

            modelBuilder.Entity("PageTurners.Core.Entities.ModeratorReview", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("BookRequestId")
                        .HasColumnType("int");

                    b.Property<string>("ModeratorId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ReviewComment")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("BookRequestId");

                    b.HasIndex("ModeratorId");

                    b.HasIndex("UserId");

                    b.ToTable("Reviews");
                });

            modelBuilder.Entity("PageTurners.Core.Entities.Rating", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("BookId")
                        .HasColumnType("int");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("Value")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("BookId");

                    b.HasIndex("UserId");

                    b.ToTable("Ratings");
                });

            modelBuilder.Entity("PageTurners.Core.Entities.User", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("DateOfBirth")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Login")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("Photo")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "b6fc3a3e-0111-448f-bad6-f7e149bc0dcb",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "a95b1b0c-1a6e-48e7-98af-7b368e4d40fb",
                            DateOfBirth = new DateTime(2052, 10, 27, 13, 51, 26, 517, DateTimeKind.Local).AddTicks(4401),
                            Email = "admin@pageturners.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            Login = "ivan123",
                            Name = "Іван Сергійович",
                            NormalizedEmail = "ADMIN@PAGETURNERS.COM",
                            NormalizedUserName = "ADMIN@PAGETURNERS.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEHpYYgJIazh5wRemxU0CzGzxhULdX9PYkeyANC/ZWv0GVCxv6BBCl2j0REdcoHpnLw==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "c7449108-7771-4d9e-a690-f2fb5a986bfa",
                            TwoFactorEnabled = false,
                            UserName = "admin@pageturners.com"
                        },
                        new
                        {
                            Id = "1243de55-f009-443c-8043-0acd37d5524a",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "1331c5ae-4bcb-4faa-be03-c1db3a78af61",
                            DateOfBirth = new DateTime(2044, 10, 27, 13, 51, 26, 517, DateTimeKind.Local).AddTicks(4440),
                            Email = "moderator@pageturners.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            Login = "daria684",
                            Name = "Дарія Петрівна",
                            NormalizedEmail = "MODERATOR@PAGETURNERS.COM",
                            NormalizedUserName = "MODERATOR@PAGETURNERS.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEJw2JRcElmTURHGPbzQdm28mSQLiXWwpwKDAOHZdp1g6gH11QB/Kz3J12zgaotafTw==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "ee5a7590-1732-4f59-9c0d-e7d188e31626",
                            TwoFactorEnabled = false,
                            UserName = "moderator@pageturners.com"
                        },
                        new
                        {
                            Id = "28898105-c650-41ef-93ed-e3c4eb349558",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "1f1d0d19-8412-451e-99db-a67545932cb1",
                            DateOfBirth = new DateTime(2044, 10, 27, 13, 51, 26, 517, DateTimeKind.Local).AddTicks(4447),
                            Email = "reader@pageturners.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            Login = "anna456",
                            Name = "Анна Олександрівна",
                            NormalizedEmail = "READER@PAGETURNERS.COM",
                            NormalizedUserName = "READER@PAGETURNERS.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEEhuAWUuk6rB4v2UDX/N1vKMuqlZLggvwFASBzx23zOVBRqBF+i6Z8JCZKFdCjHUrw==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "4344b155-e7a4-4843-9cae-7f4c2867ec2d",
                            TwoFactorEnabled = false,
                            UserName = "reader@pageturners.com"
                        });
                });

            modelBuilder.Entity("BookUser", b =>
                {
                    b.HasOne("PageTurners.Core.Entities.Book", null)
                        .WithMany()
                        .HasForeignKey("ReadBooksId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PageTurners.Core.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UsersReadBooksId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("BookUser1", b =>
                {
                    b.HasOne("PageTurners.Core.Entities.Book", null)
                        .WithMany()
                        .HasForeignKey("ToReadListId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PageTurners.Core.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UsersReadLaterId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("PageTurners.Core.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("PageTurners.Core.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PageTurners.Core.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("PageTurners.Core.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("PageTurners.Core.Entities.BookRequest", b =>
                {
                    b.HasOne("PageTurners.Core.Entities.User", "Owner")
                        .WithMany("BookRequests")
                        .HasForeignKey("OwnerId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Owner");
                });

            modelBuilder.Entity("PageTurners.Core.Entities.Comments", b =>
                {
                    b.HasOne("PageTurners.Core.Entities.Book", "Book")
                        .WithMany("Comment")
                        .HasForeignKey("BookId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PageTurners.Core.Entities.User", "Сommentator")
                        .WithMany("Comment")
                        .HasForeignKey("CommentatorId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Book");

                    b.Navigation("Сommentator");
                });

            modelBuilder.Entity("PageTurners.Core.Entities.ModeratorReview", b =>
                {
                    b.HasOne("PageTurners.Core.Entities.BookRequest", "BookRequest")
                        .WithMany("Reviews")
                        .HasForeignKey("BookRequestId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PageTurners.Core.Entities.User", "Moderator")
                        .WithMany()
                        .HasForeignKey("ModeratorId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("PageTurners.Core.Entities.User", "User")
                        .WithMany("Reviews")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("BookRequest");

                    b.Navigation("Moderator");

                    b.Navigation("User");
                });

            modelBuilder.Entity("PageTurners.Core.Entities.Rating", b =>
                {
                    b.HasOne("PageTurners.Core.Entities.Book", "Book")
                        .WithMany("Ratings")
                        .HasForeignKey("BookId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("PageTurners.Core.Entities.User", "User")
                        .WithMany("Ratings")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Book");

                    b.Navigation("User");
                });

            modelBuilder.Entity("PageTurners.Core.Entities.Book", b =>
                {
                    b.Navigation("Comment");

                    b.Navigation("Ratings");
                });

            modelBuilder.Entity("PageTurners.Core.Entities.BookRequest", b =>
                {
                    b.Navigation("Reviews");
                });

            modelBuilder.Entity("PageTurners.Core.Entities.User", b =>
                {
                    b.Navigation("BookRequests");

                    b.Navigation("Comment");

                    b.Navigation("Ratings");

                    b.Navigation("Reviews");
                });
#pragma warning restore 612, 618
        }
    }
}
