// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using PageTurners.Core.Context;

#nullable disable

namespace PageTurners.Core.Migrations
{
    [DbContext(typeof(PageTurnersContext))]
    [Migration("20231026174207_Init")]
    partial class Init
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.6")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("BookUser", b =>
                {
                    b.Property<int>("ReadBooksId")
                        .HasColumnType("int");

                    b.Property<string>("UsersReadBooksId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("ReadBooksId", "UsersReadBooksId");

                    b.HasIndex("UsersReadBooksId");

                    b.ToTable("BookUser");
                });

            modelBuilder.Entity("BookUser1", b =>
                {
                    b.Property<int>("ToReadListId")
                        .HasColumnType("int");

                    b.Property<string>("UsersReadLaterId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("ToReadListId", "UsersReadLaterId");

                    b.HasIndex("UsersReadLaterId");

                    b.ToTable("BookUser1");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "8badac42-69eb-41d3-96b7-8a7ef116c566",
                            ConcurrencyStamp = "24b54164-53b9-45ea-a8f6-0265e7557716",
                            Name = "Admin",
                            NormalizedName = "ADMIN"
                        },
                        new
                        {
                            Id = "38bb0749-e206-497c-974a-0ce947ed11fa",
                            ConcurrencyStamp = "232097a1-2359-4e4c-a629-fd8b2ead3062",
                            Name = "Moderator",
                            NormalizedName = "MODERATOR"
                        },
                        new
                        {
                            Id = "e90aa59b-0838-4572-86f7-da9679827181",
                            ConcurrencyStamp = "aba09020-4588-4eb4-a896-3f44e45aa960",
                            Name = "Reader",
                            NormalizedName = "READER"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderKey")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);

                    b.HasData(
                        new
                        {
                            UserId = "73ee5842-5475-4c8a-b9c6-bc40b8b74f18",
                            RoleId = "8badac42-69eb-41d3-96b7-8a7ef116c566"
                        },
                        new
                        {
                            UserId = "e0d8c9c3-eec0-4dc7-b2a6-2bd1b09f9846",
                            RoleId = "38bb0749-e206-497c-974a-0ce947ed11fa"
                        },
                        new
                        {
                            UserId = "e14987de-9d3d-4ab6-87b8-f8e4f30addcc",
                            RoleId = "e90aa59b-0838-4572-86f7-da9679827181"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Name")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("PageTurners.Core.Entities.Book", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Author")
                        .HasColumnType("nvarchar(max)");

                    b.Property<double?>("AverageRating")
                        .HasColumnType("float");

                    b.Property<int>("DatePubl")
                        .HasColumnType("int");

                    b.Property<string>("Desc")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Edition")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Genre")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Books");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Author = "Роберт Грін",
                            DatePubl = 1998,
                            Desc = "Ця книга розглядає стратегії та тактики влади, використовуючи приклади з історії та сучасного бізнесу.",
                            Edition = "Viking Press",
                            Genre = "Психологія, бізнес",
                            Title = "Ігри влади"
                        },
                        new
                        {
                            Id = 2,
                            Author = "Френсіс Скотт Фіцджеральд",
                            DatePubl = 1925,
                            Desc = "Цей роман розповідає історію багатого і таємничого Джей Гетсбі та його пристрасті до недосяжної коханої Дейзі.",
                            Edition = "Charles Scribner's Sons",
                            Genre = "Класика, роман",
                            Title = "Великий Гетсбі"
                        },
                        new
                        {
                            Id = 3,
                            Author = "Анна Тодд",
                            DatePubl = 2014,
                            Desc = "Ця книга розповідає про складність переходу від підліткового життя до дорослого, з фокусом на романтичних відносинах.",
                            Edition = "Gallery Books",
                            Genre = "Роман, молодіжна література",
                            Title = "Після"
                        },
                        new
                        {
                            Id = 4,
                            Author = "Джордж Р. Р. Мартін",
                            DatePubl = 1996,
                            Desc = "Перша книга серії `Пісня льоду і полум'я` розповідає про боротьбу різних родів за трон Залізного Трону у міфічному світі Вестерос.",
                            Edition = "Bantam Spectra",
                            Genre = "Фентезі, пригоди",
                            Title = "Гра престолів"
                        });
                });

            modelBuilder.Entity("PageTurners.Core.Entities.BookRequest", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Author")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("DatePubl")
                        .HasColumnType("datetime2");

                    b.Property<string>("Desc")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Edition")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Genre")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("OwnerId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("OwnerId");

                    b.ToTable("Requests");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Author = "Юлія Лабурнум",
                            OwnerId = "e0d8c9c3-eec0-4dc7-b2a6-2bd1b09f9846",
                            Title = "Лабіринт часу"
                        },
                        new
                        {
                            Id = 2,
                            Author = "Андрій Землянський",
                            Desc = "Спадщина Марса - це захоплюючий науково-фантастичний роман, який перенося читача у далеке майбутнє, на таємничу і загадкову планету Марс. Автор, Андрій Землянський, розповідає історію групи вчених і дослідників, які вирушають на Марс, щоб розкрити його давні таємниці.",
                            OwnerId = "73ee5842-5475-4c8a-b9c6-bc40b8b74f18",
                            Title = "Спадщина Марса"
                        });
                });

            modelBuilder.Entity("PageTurners.Core.Entities.Comments", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("BookId")
                        .HasColumnType("int");

                    b.Property<string>("Comment")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CommentatorId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("BookId");

                    b.HasIndex("CommentatorId");

                    b.ToTable("Comment");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            BookId = 3,
                            Comment = "Дуже цікава історія!",
                            CommentatorId = "73ee5842-5475-4c8a-b9c6-bc40b8b74f18",
                            Date = new DateTime(2023, 10, 26, 20, 41, 58, 794, DateTimeKind.Local).AddTicks(36)
                        },
                        new
                        {
                            Id = 2,
                            BookId = 1,
                            Comment = "Трохи нудно...",
                            CommentatorId = "e0d8c9c3-eec0-4dc7-b2a6-2bd1b09f9846",
                            Date = new DateTime(2023, 10, 26, 20, 41, 58, 794, DateTimeKind.Local).AddTicks(53)
                        });
                });

            modelBuilder.Entity("PageTurners.Core.Entities.ModeratorReview", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("BookRequestId")
                        .HasColumnType("int");

                    b.Property<string>("ModeratorId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ReviewComment")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("BookRequestId");

                    b.HasIndex("ModeratorId");

                    b.HasIndex("UserId");

                    b.ToTable("Reviews");
                });

            modelBuilder.Entity("PageTurners.Core.Entities.Rating", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("BookId")
                        .HasColumnType("int");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("Value")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("BookId");

                    b.HasIndex("UserId");

                    b.ToTable("Ratings");
                });

            modelBuilder.Entity("PageTurners.Core.Entities.User", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("DateOfBirth")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Login")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("Photo")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "73ee5842-5475-4c8a-b9c6-bc40b8b74f18",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "5df7c359-c3ec-4818-8062-ac1c0358be2f",
                            DateOfBirth = new DateTime(2052, 10, 26, 20, 41, 58, 788, DateTimeKind.Local).AddTicks(2348),
                            Email = "admin@pageturners.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            Login = "ivan123",
                            Name = "Іван Сергійович",
                            NormalizedEmail = "ADMIN@PAGETURNERS.COM",
                            NormalizedUserName = "ADMIN@PAGETURNERS.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEGEBbipomf9KOxDGfQyN0WTiEvB/MDP0EBy417tK5KU3gAvWjdRPqtgQNebwvtHyJQ==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "f10348b4-8995-47f5-b6a0-ccba549a2ec8",
                            TwoFactorEnabled = false,
                            UserName = "admin@pageturners.com"
                        },
                        new
                        {
                            Id = "e0d8c9c3-eec0-4dc7-b2a6-2bd1b09f9846",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "8d51545a-2059-48e1-98c9-5a4ffc53e86f",
                            DateOfBirth = new DateTime(2044, 10, 26, 20, 41, 58, 788, DateTimeKind.Local).AddTicks(2437),
                            Email = "moderator@pageturners.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            Login = "daria684",
                            Name = "Дарія Петрівна",
                            NormalizedEmail = "MODERATOR@PAGETURNERS.COM",
                            NormalizedUserName = "MODERATOR@PAGETURNERS.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEFaQExYrFCsvpLaojp3XWaqQ+kcOnidf3Iu3FhnZPl09fgnR/qzmcYO84YapkWFwfQ==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "52611960-ea9c-4004-9a4d-ba4f4305379a",
                            TwoFactorEnabled = false,
                            UserName = "moderator@pageturners.com"
                        },
                        new
                        {
                            Id = "e14987de-9d3d-4ab6-87b8-f8e4f30addcc",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "2679fb4a-b41d-4a26-8de4-3ec6b122ad24",
                            DateOfBirth = new DateTime(2044, 10, 26, 20, 41, 58, 788, DateTimeKind.Local).AddTicks(2449),
                            Email = "reader@pageturners.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            Login = "anna456",
                            Name = "Анна Олександрівна",
                            NormalizedEmail = "READER@PAGETURNERS.COM",
                            NormalizedUserName = "READER@PAGETURNERS.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEMUiBzZH/e1JCmXZ6VfIIR74YkdZONUlzt334mP1LOQ8U3eBn3J1PeodLxVndEeZEg==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "d4053d82-0f57-4c35-b01d-14b78cf2ba3b",
                            TwoFactorEnabled = false,
                            UserName = "reader@pageturners.com"
                        });
                });

            modelBuilder.Entity("BookUser", b =>
                {
                    b.HasOne("PageTurners.Core.Entities.Book", null)
                        .WithMany()
                        .HasForeignKey("ReadBooksId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PageTurners.Core.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UsersReadBooksId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("BookUser1", b =>
                {
                    b.HasOne("PageTurners.Core.Entities.Book", null)
                        .WithMany()
                        .HasForeignKey("ToReadListId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PageTurners.Core.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UsersReadLaterId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("PageTurners.Core.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("PageTurners.Core.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PageTurners.Core.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("PageTurners.Core.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("PageTurners.Core.Entities.BookRequest", b =>
                {
                    b.HasOne("PageTurners.Core.Entities.User", "Owner")
                        .WithMany("BookRequests")
                        .HasForeignKey("OwnerId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Owner");
                });

            modelBuilder.Entity("PageTurners.Core.Entities.Comments", b =>
                {
                    b.HasOne("PageTurners.Core.Entities.Book", "Book")
                        .WithMany("Comment")
                        .HasForeignKey("BookId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PageTurners.Core.Entities.User", "Сommentator")
                        .WithMany("Comment")
                        .HasForeignKey("CommentatorId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Book");

                    b.Navigation("Сommentator");
                });

            modelBuilder.Entity("PageTurners.Core.Entities.ModeratorReview", b =>
                {
                    b.HasOne("PageTurners.Core.Entities.BookRequest", "BookRequest")
                        .WithMany("Reviews")
                        .HasForeignKey("BookRequestId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PageTurners.Core.Entities.User", "Moderator")
                        .WithMany()
                        .HasForeignKey("ModeratorId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("PageTurners.Core.Entities.User", "User")
                        .WithMany("Reviews")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("BookRequest");

                    b.Navigation("Moderator");

                    b.Navigation("User");
                });

            modelBuilder.Entity("PageTurners.Core.Entities.Rating", b =>
                {
                    b.HasOne("PageTurners.Core.Entities.Book", "Book")
                        .WithMany("Ratings")
                        .HasForeignKey("BookId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("PageTurners.Core.Entities.User", "User")
                        .WithMany("Ratings")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Book");

                    b.Navigation("User");
                });

            modelBuilder.Entity("PageTurners.Core.Entities.Book", b =>
                {
                    b.Navigation("Comment");

                    b.Navigation("Ratings");
                });

            modelBuilder.Entity("PageTurners.Core.Entities.BookRequest", b =>
                {
                    b.Navigation("Reviews");
                });

            modelBuilder.Entity("PageTurners.Core.Entities.User", b =>
                {
                    b.Navigation("BookRequests");

                    b.Navigation("Comment");

                    b.Navigation("Ratings");

                    b.Navigation("Reviews");
                });
#pragma warning restore 612, 618
        }
    }
}
