// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using PageTurners.Core.Context;

#nullable disable

namespace PageTurners.Core.Migrations
{
    [DbContext(typeof(PageTurnersContext))]
    partial class PageTurnersContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.14")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "aec585e3-2bd5-4f60-8bae-7e13c2f72723",
                            Name = "Admin",
                            NormalizedName = "ADMIN"
                        },
                        new
                        {
                            Id = "e8c45a4a-20a1-4a13-b8a7-62e7ffc6bf49",
                            Name = "Moderator",
                            NormalizedName = "MODERATOR"
                        },
                        new
                        {
                            Id = "f5e913db-7831-4c7a-a654-2ad4c34e94ef",
                            Name = "Reader",
                            NormalizedName = "READER"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderKey")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);

                    b.HasData(
                        new
                        {
                            UserId = "5b58299f-2d1b-4162-9e77-4c9e74971352",
                            RoleId = "aec585e3-2bd5-4f60-8bae-7e13c2f72723"
                        },
                        new
                        {
                            UserId = "5b58299f-2d1b-4162-9e77-4c9e74971352",
                            RoleId = "e8c45a4a-20a1-4a13-b8a7-62e7ffc6bf49"
                        },
                        new
                        {
                            UserId = "40ff546a-3c48-4ff4-9b05-e827b1c10c41",
                            RoleId = "e8c45a4a-20a1-4a13-b8a7-62e7ffc6bf49"
                        },
                        new
                        {
                            UserId = "c98662b2-bcb8-41df-b8f5-2c1a833d7439",
                            RoleId = "e8c45a4a-20a1-4a13-b8a7-62e7ffc6bf49"
                        },
                        new
                        {
                            UserId = "c98662b2-bcb8-41df-b8f5-2c1a833d7439",
                            RoleId = "aec585e3-2bd5-4f60-8bae-7e13c2f72723"
                        },
                        new
                        {
                            UserId = "c98662b2-bcb8-41df-b8f5-2c1a833d7439",
                            RoleId = "f5e913db-7831-4c7a-a654-2ad4c34e94ef"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Name")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("PageTurners.Core.Entities.Book", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Author")
                        .HasColumnType("nvarchar(max)");

                    b.Property<double?>("AverageRating")
                        .HasColumnType("float");

                    b.Property<string>("CoverPath")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("DatePubl")
                        .HasColumnType("int");

                    b.Property<string>("Desc")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Edition")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Genre")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Books");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Author = "Роберт Грін",
                            CoverPath = "\\img\\book\\no_cover.jpg",
                            DatePubl = 1998,
                            Desc = "Ця книга розглядає стратегії та тактики влади, використовуючи приклади з історії та сучасного бізнесу.",
                            Edition = "Viking Press",
                            Genre = "Психологія, бізнес",
                            Title = "Ігри влади"
                        },
                        new
                        {
                            Id = 2,
                            Author = "Френсіс Скотт Фіцджеральд",
                            CoverPath = "\\img\\book\\no_cover.jpg",
                            DatePubl = 1925,
                            Desc = "Цей роман розповідає історію багатого і таємничого Джей Гетсбі та його пристрасті до недосяжної коханої Дейзі.",
                            Edition = "Charles Scribner's Sons",
                            Genre = "Класика, роман",
                            Title = "Великий Гетсбі"
                        },
                        new
                        {
                            Id = 3,
                            Author = "Анна Тодд",
                            CoverPath = "\\img\\book\\no_cover.jpg",
                            DatePubl = 2014,
                            Desc = "Ця книга розповідає про складність переходу від підліткового життя до дорослого, з фокусом на романтичних відносинах.",
                            Edition = "Gallery Books",
                            Genre = "Роман, молодіжна література",
                            Title = "Після"
                        },
                        new
                        {
                            Id = 4,
                            Author = "Джордж Р. Р. Мартін",
                            CoverPath = "\\img\\book\\no_cover.jpg",
                            DatePubl = 1996,
                            Desc = "Перша книга серії `Пісня льоду і полум'я` розповідає про боротьбу різних родів за трон Залізного Трону у міфічному світі Вестерос.",
                            Edition = "Bantam Spectra",
                            Genre = "Фентезі, пригоди",
                            Title = "Гра престолів"
                        });
                });

            modelBuilder.Entity("PageTurners.Core.Entities.BookRequest", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Author")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CoverPath")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("DatePubl")
                        .HasColumnType("int");

                    b.Property<string>("Desc")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Edition")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Genre")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("OwnerId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("OwnerId");

                    b.ToTable("Requests");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Author = "Юлія Лабурнум",
                            CoverPath = "\\img\\book\\no_cover.jpg",
                            DatePubl = 0,
                            OwnerId = "40ff546a-3c48-4ff4-9b05-e827b1c10c41",
                            Title = "Лабіринт часу"
                        },
                        new
                        {
                            Id = 2,
                            Author = "Андрій Землянський",
                            CoverPath = "\\img\\book\\no_cover.jpg",
                            DatePubl = 0,
                            Desc = "Спадщина Марса - це захоплюючий науково-фантастичний роман, який перенося читача у далеке майбутнє, на таємничу і загадкову планету Марс. Автор, Андрій Землянський, розповідає історію групи вчених і дослідників, які вирушають на Марс, щоб розкрити його давні таємниці.",
                            OwnerId = "5b58299f-2d1b-4162-9e77-4c9e74971352",
                            Title = "Спадщина Марса"
                        });
                });

            modelBuilder.Entity("PageTurners.Core.Entities.Comments", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("BookId")
                        .HasColumnType("int");

                    b.Property<string>("Comment")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CommentatorId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("BookId");

                    b.HasIndex("CommentatorId");

                    b.ToTable("Comment");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            BookId = 3,
                            Comment = "Дуже цікава історія!",
                            CommentatorId = "5b58299f-2d1b-4162-9e77-4c9e74971352",
                            Date = new DateTime(2023, 12, 18, 16, 26, 49, 339, DateTimeKind.Local).AddTicks(3702)
                        },
                        new
                        {
                            Id = 2,
                            BookId = 1,
                            Comment = "Трохи нудно...",
                            CommentatorId = "40ff546a-3c48-4ff4-9b05-e827b1c10c41",
                            Date = new DateTime(2023, 12, 18, 16, 26, 49, 339, DateTimeKind.Local).AddTicks(3813)
                        });
                });

            modelBuilder.Entity("PageTurners.Core.Entities.ModeratorReview", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("BookRequestId")
                        .HasColumnType("int");

                    b.Property<string>("ModeratorId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ReviewComment")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("BookRequestId");

                    b.HasIndex("ModeratorId");

                    b.HasIndex("UserId");

                    b.ToTable("Reviews");
                });

            modelBuilder.Entity("PageTurners.Core.Entities.Rating", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("BookId")
                        .HasColumnType("int");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("Value")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("BookId");

                    b.HasIndex("UserId");

                    b.ToTable("Ratings");
                });

            modelBuilder.Entity("PageTurners.Core.Entities.User", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("DateOfBirth")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Login")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("Photo")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "5b58299f-2d1b-4162-9e77-4c9e74971352",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "d1ef7088-7d7f-4041-82bc-ed79b4993ee5",
                            DateOfBirth = new DateTime(2052, 12, 18, 16, 26, 49, 71, DateTimeKind.Local).AddTicks(4247),
                            Email = "admin@pageturners.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            Login = "ivan123",
                            Name = "Іван Сергійович",
                            NormalizedEmail = "ADMIN@PAGETURNERS.COM",
                            NormalizedUserName = "ADMIN@PAGETURNERS.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEGjeKHlgwk0OJDutQWEvpAuAQwLO7zJxjmrjz7HFIKp/EqC749CBnJpEH2QfWHXGvQ==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "2c1dfb81-6b5d-4676-aa7f-9276cd51300f",
                            TwoFactorEnabled = false,
                            UserName = "admin@pageturners.com"
                        },
                        new
                        {
                            Id = "40ff546a-3c48-4ff4-9b05-e827b1c10c41",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "f296ebeb-449f-474e-b8f9-99e3fdfd191a",
                            DateOfBirth = new DateTime(2044, 12, 18, 16, 26, 49, 71, DateTimeKind.Local).AddTicks(4319),
                            Email = "moderator@pageturners.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            Login = "daria684",
                            Name = "Дарія Петрівна",
                            NormalizedEmail = "MODERATOR@PAGETURNERS.COM",
                            NormalizedUserName = "MODERATOR@PAGETURNERS.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEHDiPUbZp+xS536LFCNyLGlAo1TnpOTLwEuL27YDRWmWdE8+bnPEFCg8GkH66Y3VFA==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "a4c86d82-c2ff-4cc2-9b4e-dd44df655037",
                            TwoFactorEnabled = false,
                            UserName = "moderator@pageturners.com"
                        },
                        new
                        {
                            Id = "c98662b2-bcb8-41df-b8f5-2c1a833d7439",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "c6b0406c-5f46-4176-be3e-2f8012aca67c",
                            DateOfBirth = new DateTime(2044, 12, 18, 16, 26, 49, 71, DateTimeKind.Local).AddTicks(4332),
                            Email = "reader@pageturners.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            Login = "anna456",
                            Name = "Анна Олександрівна",
                            NormalizedEmail = "READER@PAGETURNERS.COM",
                            NormalizedUserName = "READER@PAGETURNERS.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEMFEw2rM7In/2+tA9q6h39HzDDSILV1IcGttIHQb2aIc9oA0Mq1CGgIHVe2b/xAiZg==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "b287802c-566c-42a4-93e0-69b82c6439fe",
                            TwoFactorEnabled = false,
                            UserName = "reader@pageturners.com"
                        });
                });

            modelBuilder.Entity("PageTurners.Core.Entities.UserBook", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("BookId")
                        .HasColumnType("int");

                    b.Property<int?>("BookId1")
                        .HasColumnType("int");

                    b.Property<int>("UserBookId")
                        .HasColumnType("int");

                    b.HasKey("UserId", "BookId");

                    b.HasIndex("BookId");

                    b.HasIndex("BookId1");

                    b.ToTable("UserBooks");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("PageTurners.Core.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("PageTurners.Core.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PageTurners.Core.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("PageTurners.Core.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("PageTurners.Core.Entities.BookRequest", b =>
                {
                    b.HasOne("PageTurners.Core.Entities.User", "Owner")
                        .WithMany("BookRequests")
                        .HasForeignKey("OwnerId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Owner");
                });

            modelBuilder.Entity("PageTurners.Core.Entities.Comments", b =>
                {
                    b.HasOne("PageTurners.Core.Entities.Book", "Book")
                        .WithMany("Comment")
                        .HasForeignKey("BookId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PageTurners.Core.Entities.User", "Commentator")
                        .WithMany("Comment")
                        .HasForeignKey("CommentatorId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Book");

                    b.Navigation("Commentator");
                });

            modelBuilder.Entity("PageTurners.Core.Entities.ModeratorReview", b =>
                {
                    b.HasOne("PageTurners.Core.Entities.BookRequest", "BookRequest")
                        .WithMany("Reviews")
                        .HasForeignKey("BookRequestId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PageTurners.Core.Entities.User", "Moderator")
                        .WithMany()
                        .HasForeignKey("ModeratorId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("PageTurners.Core.Entities.User", "User")
                        .WithMany("Reviews")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("BookRequest");

                    b.Navigation("Moderator");

                    b.Navigation("User");
                });

            modelBuilder.Entity("PageTurners.Core.Entities.Rating", b =>
                {
                    b.HasOne("PageTurners.Core.Entities.Book", "Book")
                        .WithMany("Ratings")
                        .HasForeignKey("BookId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("PageTurners.Core.Entities.User", "User")
                        .WithMany("Ratings")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Book");

                    b.Navigation("User");
                });

            modelBuilder.Entity("PageTurners.Core.Entities.UserBook", b =>
                {
                    b.HasOne("PageTurners.Core.Entities.Book", "Book")
                        .WithMany("UsersReadLater")
                        .HasForeignKey("BookId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PageTurners.Core.Entities.Book", null)
                        .WithMany("UsersReadBooks")
                        .HasForeignKey("BookId1");

                    b.HasOne("PageTurners.Core.Entities.User", "User")
                        .WithMany("ToReadList")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Book");

                    b.Navigation("User");
                });

            modelBuilder.Entity("PageTurners.Core.Entities.Book", b =>
                {
                    b.Navigation("Comment");

                    b.Navigation("Ratings");

                    b.Navigation("UsersReadBooks");

                    b.Navigation("UsersReadLater");
                });

            modelBuilder.Entity("PageTurners.Core.Entities.BookRequest", b =>
                {
                    b.Navigation("Reviews");
                });

            modelBuilder.Entity("PageTurners.Core.Entities.User", b =>
                {
                    b.Navigation("BookRequests");

                    b.Navigation("Comment");

                    b.Navigation("Ratings");

                    b.Navigation("Reviews");

                    b.Navigation("ToReadList");
                });
#pragma warning restore 612, 618
        }
    }
}
